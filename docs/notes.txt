want to read things more structurally goto -> 

architecture - x86
legacy boot -
    loads the first sector of each bootable device in mem @0x7c00
    bios check for signature
    if found starts executing the code 
efi boot -
    looks for a special efi partitions
    for this the os needs to be compiled as an Efi prog

boot order -- 
p-on - exec @0xffff0 (BIOS mem)
post - bios firmware exec + test 
bootloader search - bios scan -- hdd sdd floppy cd usb for MBR(form of boot sector) 
                    check for the bootable media (512b) and load it 
transfer control to bootloader - loads bootloader from the drive @0x7c00 in mem. 
(if needed the bios will switch the cpu from real mode to protected mode ) (real mode(16bit mode) - direct access to the hardware BIOS can call interrupts like INT 0x10)
(Initialisations)

load Kernel - bootloader locates the kernel and loads it int mem (full resp of the bootloader) 
kernel executes 




bootsector - first sector of any bootable drive
    typically 512bytes long 
    bootsector -> the file has to be 512b compulsorily be this much size to be recognised as bootable. 

Bios -- supports real mode 16 bit mode 
basic io system eg take values from the keyboard, display char to the screen etc read from disc etc
     
